<?php

namespace BalancelleBundle\Repository;

use BalancelleBundle\Entity\Calendrier;
use BalancelleBundle\Entity\Enfant;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;

/**
 * StructureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StructureRepository extends EntityRepository
{
    /**
     * Récupère les enfants non liés à une famille
     * @return mixed
     */
    public function countStructure()
    {
        try {
            return $this
                ->createQueryBuilder('a')
                ->select('COUNT(a.id)')
                ->where('a.active = 1')
                ->getQuery()
                ->getSingleScalarResult()
                ;
        } catch (NoResultException $e) {
        } catch (NonUniqueResultException $e) {
        }
    }

    public function getStructureActive()
    {
        return $this
            ->createQueryBuilder('a')
            ->where('a.active = 1')
            ->getQuery()
            ->execute()
            ;
    }

    public function getStructuresAvecCalendrier()
    {
        $structures = [];
        foreach ($this->getStructureActive() as $structure) {
            if ($this->verifieSiStructureAunCalendrier($structure)) {
                $structures[] = $structure;
            }
        }

        return $structures;
    }

    public function verifieSiStructureAunCalendrier($structure)
    {
        $calendriers = $this->getEntityManager()->getRepository(Calendrier::class)
            ->findBy(['structure' => $structure, 'active' => 1]);

        return count($calendriers);
    }


    public function getStructuresDuneFamille($familleId)
    {
        return $this
            ->createQueryBuilder('a')
            ->from(Enfant::class, 'e')
            ->where('e.famille = ' . $familleId)
            ->andWhere('e.structure = a')
            ->getQuery()
            ->execute()
            ;
    }
}
